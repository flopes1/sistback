package com.ssl.entities;
// default package

// Generated 28/02/2017 22:40:44 by Hibernate Tools 5.2.1.Final

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;

/**
 * Employee generated by hbm2java
 */
@Entity
@Table(name = "employee", schema = "dbo", uniqueConstraints = @UniqueConstraint(columnNames = "cpf"))
@DynamicInsert
@DynamicUpdate
public class Employee implements Serializable
{

    /**
     * 
     */
    private static final long serialVersionUID = 3555149641948212561L;

    private int id;
    private Condominium condominium;
    private String name;
    private String cpf;
    private Boolean localAdm;
    private Boolean systemAdm;
    private String email;
    private String password;
    private Set<AutenticationHistory> autenticationHistories = new HashSet<AutenticationHistory>(0);
    private Set<PhoneNumberEmployee> phoneNumberEmployees = new HashSet<PhoneNumberEmployee>(0);

    public Employee()
    {
    }

    public Employee(int id, String name, String cpf, String email, String password)
    {
        this.id = id;
        this.name = name;
        this.cpf = cpf;
        this.password = password;
        this.email = email;
    }

    public Employee(int id, Condominium condominium, String name, String cpf, String password, Boolean localAdm, Boolean systemAdm,
            String email, Set<AutenticationHistory> autenticationHistories,
            Set<PhoneNumberEmployee> phoneNumberEmployees)
    {
        this.id = id;
        this.condominium = condominium;
        this.name = name;
        this.cpf = cpf;
        this.localAdm = localAdm;
        this.systemAdm = systemAdm;
        this.email = email;
        this.password = password;
        this.autenticationHistories = autenticationHistories;
        this.phoneNumberEmployees = phoneNumberEmployees;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public int getId()
    {
        return this.id;
    }

    public void setId(int id)
    {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "condominium_id")
    public Condominium getCondominium()
    {
        return this.condominium;
    }

    public void setCondominium(Condominium condominium)
    {
        this.condominium = condominium;
    }

    @Column(name = "name", nullable = false)
    public String getName()
    {
        return this.name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    @Column(name = "cpf", unique = true, nullable = false)
    public String getCpf()
    {
        return this.cpf;
    }

    public void setCpf(String cpf)
    {
        this.cpf = cpf;
    }

    @Column(name = "local_adm")
    public Boolean getLocalAdm()
    {
        return this.localAdm;
    }

    public void setLocalAdm(Boolean adm)
    {
        this.localAdm = adm;
    }

    @Column(name = "system_adm")
    public Boolean getSystemAdm()
    {
        return this.systemAdm;
    }

    public void setSystemAdm(Boolean adm)
    {
        this.systemAdm = adm;
    }

    @Column(name = "email", nullable = false)
    public String getEmail()
    {
        return this.email;
    }

    public void setEmail(String email)
    {
        this.email = email;
    }
    
    @Column(name = "password", nullable = false)
    public String getPassword()
    {
        return this.password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
    public Set<AutenticationHistory> getAutenticationHistories()
    {
        return this.autenticationHistories;
    }

    public void setAutenticationHistories(Set<AutenticationHistory> autenticationHistories)
    {
        this.autenticationHistories = autenticationHistories;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
    public Set<PhoneNumberEmployee> getPhoneNumberEmployees()
    {
        return this.phoneNumberEmployees;
    }

    public void setPhoneNumberEmployees(Set<PhoneNumberEmployee> phoneNumberEmployees)
    {
        this.phoneNumberEmployees = phoneNumberEmployees;
    }

}
